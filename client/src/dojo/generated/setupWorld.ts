/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, BigNumberish } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { ethToWei } from "../../utils/starknet";
import { bigintToHex } from "../../utils/types";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export const NAMESPACE = 'karat'

export async function setupWorld(provider: DojoProvider) {
  
  //
  // MINTER
  //
  function minter() {
    const mint = async ({ account, contract_address }: { account: AccountInterface, contract_address:BigNumberish }) => {
      try {
        return await provider.execute(account, {
          contractName: "minter",
          entrypoint: "mint",
          calldata: [contract_address],
        }, NAMESPACE, {
          maxFee: bigintToHex(ethToWei(1) / 10000n),
        });
      } catch (error) {
        console.error("Error executing mint:", error);
        throw error;
      }
    };
    return { mint };
  }

  //
  // KARAT
  //
  function karat_token() {
    const token_uri = async ({ token_id }: { token_id: BigNumberish }) => {
      try {
        return await provider.call(NAMESPACE, {
          contractName: "karat_token",
          entrypoint: "token_uri",
          calldata: [token_id],
        });
      } catch (error) {
        console.error("Error calling token_uri:", error);
        throw error;
      }
    };
    return { token_uri };
  }


  return {
    minter: minter(),
    karat_token: karat_token(),
  };
}
